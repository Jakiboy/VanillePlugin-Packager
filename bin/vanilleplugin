#!/usr/bin/env php
<?php
/**
 * @author    : JIHAD SINNAOUR
 * @package   : VanillePlugin Packager
 * @copyright : (c) 2021 JIHAD SINNAOUR <mail@jihadsinnaour.com>
 * @link      : https://github.com/Jakiboy/VanillePlugin-Packager
 * @license   : MIT
 */

declare(strict_types=1);

// Check CLI
if (php_sapi_name() !== 'cli') exit();

// Get Args
$option = parse($argv);

// Prepare command-line
if ( isset($option['-generate']) ) {
	if ( $option['-generate'] === true ) {
		generate();
	} else {
		generate($option['-generate']);
	}
} else {
	showHelp();
}

// Generate Prefix
function generate($prefix = ''){
	$prefix = !empty($prefix) ? normalize($prefix) : getRandom();
	foreach (getFiles(getcwd()) as $file) {
		if ( $file == __FILE__ ) {
			continue;
		}
		$tmp = file_get_contents($file);
		$tmp = prefixNamespace($tmp, $prefix);
		$tmp = prefixUseFunction($tmp, $prefix);
		$tmp = prefixUseConst($tmp, $prefix);
		$tmp = prefixUse($tmp, $prefix);
		@file_put_contents($file,$tmp);
	}
}

// Prefix namespace
function prefixNamespace($content, $prefix = ''){
	$regex = '/(\s+)%1$s\\s+(?!(%2$s)|(Composer(\\\\|;)))/';
    $pattern = sprintf($regex, 'namespace VanillePlugin', "{$prefix}VanillePlugin");
    $replace = sprintf('%1$s %2$s', '${1}namespace', "{$prefix}VanillePlugin");
    return preg_replace($pattern,$replace,$content);
}

// Prefix use function
function prefixUseFunction($content, $prefix = ''){
	$regex = '/%1$s\\s+(?!(%2$s)|(\\\\(?!.*\\\\.*))|(Composer(\\\\|;)|(?!.*\\\\.*)))/';
    $pattern = sprintf($regex, 'use function VanillePlugin', "{$prefix}VanillePlugin");
    $replace = sprintf('%1$s %2$s', 'use function', "{$prefix}VanillePlugin");
    return preg_replace($pattern,$replace,$content);
}

// Prefix use constant
function prefixUseConst($content, $prefix = ''){
	$regex = '/%1$s\\s+(?!(%2$s)|(\\\\(?!.*\\\\.*))|(Composer(\\\\|;)|(?!.*\\\\.*)))/';
    $pattern = sprintf($regex, 'use const VanillePlugin', "{$prefix}VanillePlugin");
    $replace = sprintf('%1$s %2$s', 'use const', "{$prefix}VanillePlugin");
    return preg_replace($pattern,$replace,$content);
}

// Prefix use
function prefixUse($content, $prefix = ''){
	$regex = '/%1$s\\s+(?!(const)|(function)|(%2$s)|(\\\\(?!.*\\\\.*))|(Composer(\\\\|;)|(?!.*\\\\.*)))/';
    $pattern = sprintf($regex, 'use VanillePlugin', "{$prefix}VanillePlugin");
	$replace = sprintf('%1$s %2$s', 'use', "{$prefix}VanillePlugin");
	return preg_replace($pattern,$replace,$content);
}

// Normalize Prefix
function normalize($prefix){
	return ucfirst(preg_replace('~[^\pL\d]+~u','',$prefix));
}

// Get Random String
function getRandom(){
	$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	return ucfirst(substr(str_shuffle($chars),0,10));
}

// Get Lib Files
function getFiles($dir, &$files = []) {
	$sep = DIRECTORY_SEPARATOR;
    $objects = scandir($dir);
    foreach ($objects as $key => $value) {
        $path = realpath("{$dir}{$sep}{$value}");
        if ( filetype($path) == 'file' ) {
        	if ( pathinfo($path,PATHINFO_EXTENSION) == 'php' ) {
        		$files[] = $path;
        	}
        } elseif ( $value !== '.' && $value !== '..' ) {
            getFiles($path, $files);
        }
    }
    return $files;
}

// Parse Args
function parse($argv){
	$tmp = [];
	if ( isset($argv[2]) ) {
		$tmp[$argv[1]] = $argv[2];
	} else {
		if ( isset($argv[1]) ) {
			$tmp[$argv[1]] = true;
		}
	}
	return $tmp;
}

// Show Help
function showHelp(){
	echo 
	<<<HLP

	VanillePlugin Prefixer (WordPress Plugin Namespaces Prefixer)

	Usage: vanilleplugin -generate [prefix]

	Options:
	       -generate [prefix]    Generate namespace prefix
	       -generate             Generate random namespace prefix

	HLP;
	exit(1);
}