#!/usr/bin/env php
<?php
/**
 * @author    : JIHAD SINNAOUR
 * @package   : VanillePlugin Packager
 * @version   : 0.1.0
 * @copyright : (c) 2021 JIHAD SINNAOUR <mail@jihadsinnaour.com>
 * @link      : https://github.com/Jakiboy/VanillePlugin-Packager
 * @license   : MIT
 */

declare(strict_types=1);

// Check CLI
if (php_sapi_name() !== 'cli') exit();

// Get Args
$option = parse($argv);

// Prepare command-line
if ( isset($option['-generate']) ) {
	if ( $option['-generate'] === true ) {
		generate();
	} else {
		generate($option['-generate']);
	}
} else {
	showHelp();
}

// Generate prefix
function generate($prefix = ''){
	$sep = DIRECTORY_SEPARATOR;
	$dir = getcwd();
	$replacements = [
		"{$dir}{$sep}core{$sep}vendor{$sep}jakiboy{$sep}vanilleplugin{$sep}src",
		"{$dir}{$sep}core{$sep}vendor{$sep}composer",
		"{$dir}{$sep}core{$sep}system"
	];
	foreach ($replacements as $replace) {
		if ( is_dir($replace) ) {
			foreach (getFiles($replace) as $file) {
				$tmp = file_get_contents($file);
				$tmp = prefixNamespace($tmp,$prefix);
				$tmp = prefixUse($tmp,$prefix);
				$tmp = prefixAutoload($tmp,$prefix);
				@file_put_contents($file,$tmp);
			}
		}
	}
}

// Prefix namespace
function prefixNamespace($content, $prefix = ''){
	$regex = '/(?i)namespace\s+VanillePlugin/';
    return preg_replace($regex, "namespace {$prefix}VanillePlugin", $content);
}

// Prefix use
function prefixUse($content, $prefix = ''){
	$regex = '/(?i)use\s+VanillePlugin/';
    return preg_replace($regex, "use {$prefix}VanillePlugin", $content);
}

// Prefix autoload
function prefixAutoload($content, $prefix = ''){
	$regex = '/VanillePlugin\\\\\\\\/';
    return preg_replace($regex, "{$prefix}VanillePlugin\\\\\\\\", $content);
}

// Normalize prefix
function normalize($prefix){
	return ucfirst(preg_replace('~[^\pL\d]+~u','',$prefix));
}

// Get random string
function getRandom(){
	$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	return ucfirst(substr(str_shuffle($chars),0,10));
}

// Get Lib Files
function getFiles($dir, &$files = []) {
	$sep = DIRECTORY_SEPARATOR;
    $objects = scandir($dir);
    foreach ($objects as $key => $value) {
        $path = realpath("{$dir}{$sep}{$value}");
        if ( filetype($path) == 'file' ) {
        	if ( pathinfo($path,PATHINFO_EXTENSION) == 'php' ) {
        		$files[] = $path;
        	}
        } elseif ( $value !== '.' && $value !== '..' ) {
        	getFiles($path, $files);
        }
    }
    return $files;
}

// Parse args
function parse($argv){
	$tmp = [];
	if ( isset($argv[2]) ) {
		$tmp[$argv[1]] = $argv[2];
	} else {
		if ( isset($argv[1]) ) {
			$tmp[$argv[1]] = true;
		}
	}
	return $tmp;
}

// Show help
function showHelp(){
	echo 
	<<<HLP

	VanillePlugin Prefixer (WordPress Plugin Namespaces Prefixer)

	Usage: vanilleplugin -generate [prefix]

	Options:
	       -generate [prefix]    Generate namespace prefix
	       -generate             Generate random namespace prefix

	HLP;
	exit(1);
}